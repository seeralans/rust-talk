#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js
# Local variables:
# eval: (add-hook 'after-save-hook 'org-reveal-export-to-html  t t)
# end:
#+LATEX: \newcommand{\giv}{\,|\,} \newcommand{\arcosh}{\mathrm{arcosh}}
#+OPTIONS: num:nil toc:nil date:nil
#+REVEAL_TRANS: linear
#+REVEAL_THEME: solarized
#+REVEAL_HLEVEL: 2
# Local variables:
# eval: (add-hook 'after-save-hook 'org-reveal-export-to-html  t t)
# end:
#+LATEX: \newcommand{\giv}{\,|\,} \newcommand{\arcosh}{\mathrm{arcosh}}
#+reveal_title_slide_background: ./figures/rust-logo.svg
#+reveal_title_slide_background_opacity: 0.05
#+reveal_title_slide_background_REPEAT: repeat
#+REVEAL_PLUGINS: (highlight)
#+REVEAL_INIT_OPTIONS: hash: true

#+reveal_default_slide_background: ./figures/rust-logo.svg
#+reveal_default_slide_background_OPACITy: 0.05
#+reveal_default_slide_background_REPEAT: repeat
#+REVEAL_EXTRA_CSS: local.css

#+Title: Being Fierce: Native Python Modules With Rust
#+Author: Seeralan Sarvaharman
#+Email: s.sarvaharman@bristol.ac.uk

* Overview
- Context  
- What is Rust?
- Getting started
- Integrating Python and Rust
- Examples


* Python
#+REVEAL_HTML: <div class="column" style="float:left; width:50%">
*Advantages*
- Easy to learn
- Expressive
- Exisiting Libraries
- Interactive
- "Glue"
#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="column" style="float:right; width:50%">
*Disadvantages*
- Global Interpreter Lock
- "Slow"
#+REVEAL_HTML: </div>


* The Two-Language Problem
  
#+REVEAL_HTML: <div class="column" style="float:left; width:50%">
#+ATTR_HTML: :height 60%, :width 60%
[[./figures/julia.svg]] 

#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="column" style="float:left; width:50%">
#+ATTR_HTML: :height 80%, :width 80%
[[./figures/numba.svg]] 
#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div id="cython" style="text-align:center">
#+ATTR_HTML: :height 80%, :width 80%
[[./figures/cython.svg]] 
#+REVEAL_HTML: </div>


* What is Rust?

#+REVEAL_HTML: <div class="column" style="float:left; width:50%">
  #+ATTR_HTML: :height 50%, :width 50%
  [[./figures/moz.svg]] 
  #+ATTR_HTML: :height 50%, :width 50%
  [[./figures/firefox.svg]] 
#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="column" style="float:right; width:50%">
- Compiled
- Static typing
  - Inferred
- Low-level

#+REVEAL_HTML: </div>
  


#+begin_notes
Rust is a compiled, strongly typed language.
It is similar to C/C++, in that your code is compiled down to machine

And like C/C++ its is very fast.

But unlike C/C++ rust is very safe, it doesn't crash so you can be
confident that if your code compiles it will not crash unexpectedly.

#+end_notes

* Why Rust?
#+REVEAL_HTML: <div class="column" style="float:left; width:50%">
- Fast
- Memory Safety
- Open Source
#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="column" style="float:right; width:50%">
- Multithreading
- No Garbage Collector
- New and shiny
#+REVEAL_HTML: </div>

* Getting Started
- Find it at [[https://www.rust-lang.org][rust.org]]

- Install using [[https://rustup.rs/][rustup]]

- RTFM: [[https://doc.rust-lang.org/book/][The Rust Book]]

- [[https://doc.rust-lang.org/rust-by-example/][Rust by example]]

* Hello World! 

* Tooling
- Building: Cargo
  - Rust's version of make
- Package management: Cargo
  - Rust's version of pip
- Managing compiler versions: rustup
  - Similar to python's virtual environments
- Auto style formating: [[https://github.com/rust-lang/rustfmt][rustfmt]]
- Auto completion [[https://github.com/racer-rust/racer][racer]]
- Languge server: [[https://github.com/rust-lang/rls][rls]]
*** [[https://microsoft.github.io/language-server-protocol/][Language Server Protocol]]



* Stable Rust vs Nightly
- We need nightly 
- Occasionally tools and crates break 
- [[https://rust-lang.github.io/rustup-components-history][Rust tool status]]
  


* My Research
  :PROPERTIES:
  :CUSTOM_ID: slide_1
  :END:

  #+ATTR_HTML: :height 50%, :width 50% 
  [[./figures/diagram.svg]]  


* Integrating Python and Rust

#+REVEAL_HTML: <div class="column" style="float:left; width:50%">
*Python Side*
- Python 3.5
- [[https://pypi.org/project/maturin/][Maturin]]
  - Install using pip
#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="column" style="float:right; width:50%">
*Rust Side*
- [[https://github.com/PyO3/pyo3][PyO3]] Crate
  
* Demo

#+REVEAL_HTML: </div>

#+begin_notes

pip install maturin matplotlib numpy ipython PyQt5



  
#+NAME: eq:something
\begin{equation}
 2 + \oint \frac{\mathrm{d}}{\mathrm{d} z}  \frac{f(z)}{\sigma - z} 
\end{equation}

Being Fierce: Native Python Modules With Rust

 

As researchers we spend most of our time exploring. Dynamic
programming expressive languages such as python or matlab give us the
freedom to spend time solving the problem instead
of wasting time with programming itself. At some point we want to turn
our hacky exploratory code into something less hacky that we might use
again or worse share. If we want
something fast and we often have to rewrite our code in a compiled
language like C/C++ at the cost of the exploratory freedom of
python. This is the so-called two language problem, as
researchers we want both the exploratory nature and the rapid
prototyping of a language like python with the fast runtime of a
compiled language.

 

Rust is the new darling of compiled programming languages. Being
designed from the ground up for modern computers, it aims to eliminate
the problems that we often face when writing
in languages such as C/C++. During the talk I will present a solution
to the two-language problem. By writing python modules in Rust, we can
leverage the efficiency and speed of running
native code with all the benefits of python's dynamism and its
extensive scientific models.

#+end_notes

